import os
import json
from flask import Flask, request, jsonify
from dotenv import load_dotenv
from transformers import pipeline
from openai import OpenAI
from utils.strings import *
from utils.utils import *

app = Flask(__name__)

# Load environment variables from a file called .env
load_dotenv()

# Initiate OpenAI client
client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY")
)

# Initialize GPT-2 story generator pipeline
story_gen = pipeline("text-generation", "pranavpsv/gpt2-genre-story-generator")

def generateOptionFromChatGpt(sentence: str):
    """
    Generates potential one-sentence scenarios using OpenAI's GPT-3.5-turbo model.

    Parameters:
    - sentence (str): The user-provided sentence that serves as input for scenario generation.

    Returns:
    - str: The generated scenario in JSON format.
    """
    system_content = systemContentMsg(sentence)

    completion = client.chat.completions.create(
        model=GPT_MODEL,
        messages=gptCompletionMsg(sentence, system_content)
    )
    return completion.choices[0].message.content

# Story generation route
@app.route(ENDPOINT + ROUTE_GENERATE_STORY, methods=[POST])
def generate():
    """
    Handles the generation of content based on HTTP POST requests with JSON payload.

    Returns:
    - List: A list containing the GPT-2 generated story and additional responses from ChatGPT.
            The story is augmented with options generated by ChatGPT.
    - str: Error message if the request method or content type is invalid.
    """
    try:
        # Extract request details
        request_method = request.method
        content_type = request.headers.get(CONTENT_TYPE)

        # Check if the request is a valid POST request with JSON content
        if request_method == POST and content_type == CONTENT_TYPE_JSON:
            # Extract data from JSON payload
            data = request.get_json()
            sentence = data.get(KEY_SENTENCE)  # Use get to avoid KeyError
            genre = data.get(KEY_GENRE)

            # Check if required data is present in the JSON payload
            if sentence is None or genre is None:
                return jsonify({KEY_ERROR: MSG_INVALID_PAYLOAD}), 400

            # Generate a story using GPT-2 with genre and sentence information
            gpt_2 = story_gen(storyGenArg(genre, sentence))
            
            # Clean the generated text from GPT-2 response
            gpt_2[0][KEY_GENERATED_TEXT] = cleanGeneratedMsg(gpt_2[0][KEY_GENERATED_TEXT])

            # Generate options using ChatGPT based on the cleaned GPT-2 response
            chatgpt_response = generateOptionFromChatGpt(gpt_2[0][KEY_GENERATED_TEXT])
            
            # Parse the ChatGPT response from JSON
            json_chatgpt_response = json.loads(chatgpt_response)

            # Append ChatGPT response to the GPT-2 generated story
            gpt_2.append(json_chatgpt_response)

            # Return the augmented list containing the GPT-2 generated story and ChatGPT responses
            return jsonify(gpt_2)
        else:
            return jsonify({KEY_ERROR: MSG_INVALID_METHOD_CONTENT}), 400
    except Exception as e:
        return jsonify({KEY_ERROR: str(e)}), 500


if __name__ == "__main__":
    from waitress import serve
    serve(app, host="0.0.0.0", port=8000)

import os
import re
import json
from flask import Flask, request
from dotenv import load_dotenv
from transformers import pipeline
from openai import OpenAI

app = Flask(__name__)

# Load environment variables from a file called .env
load_dotenv()

# Initiate OpenAI client
client = OpenAI(
    api_key=os.environ.get("OPENAI_API_KEY")
)

# Initialize GPT-2 story generator pipeline
story_gen = pipeline("text-generation", "pranavpsv/gpt2-genre-story-generator")

def generateOptionFromChatGpt(sentence: str):
    """
    Generates potential one-sentence scenarios using OpenAI's GPT-3.5-turbo model.

    Parameters:
    - sentence (str): The user-provided sentence that serves as input for scenario generation.

    Returns:
    - str: The generated scenario in JSON format.
    """
    completion = client.chat.completions.create(
        model='gpt-3.5-turbo',
        messages=[
            {"role": "system", "content" :'You are an option generator. Generate three potential one sentence scenarios in JSON format \{"scenario1": "", "scenario2": "", "scenario3": ""\}.'},
            {"role": "user", "content": sentence}
        ]
    )
    return completion.choices[0].message.content

# Story generation route
@app.route('/generate', methods=['POST'])
def generate():
    """
    Handles the generation of content based on HTTP POST requests with JSON payload.

    Returns:
    - List: A list containing the GPT-2 generated story and additional responses from ChatGPT.
            The story is augmented with options generated by ChatGPT.
    - str: Error message if the request method or content type is invalid.
    """
    # Extract request details
    request_method = request.method
    content_type = request.headers.get('Content-Type')

    # Check if the request is a valid POST request with JSON content
    if request_method == 'POST' and content_type == 'application/json':
        # Extract data from JSON payload
        data = request.get_json()
        sentence = data['sentence']
        genre = data['genre']

        # Generate a story using GPT-2 with genre and sentence information
        gpt_2 = story_gen(f"<BOS> <{genre}> {sentence}")
        
        # Extract and clean the generated text from GPT-2 response
        cleaned_generated_text = re.sub(r'<[^>]+>', '', gpt_2[0]["generated_text"])

        # Generate options using ChatGPT based on the cleaned GPT-2 response
        chatgpt_response = generateOptionFromChatGpt(cleaned_generated_text)
        
        # Parse the ChatGPT response from JSON
        json_chatgpt_response = json.loads(chatgpt_response)

        # Append ChatGPT response to the GPT-2 generated story
        gpt_2.append(json_chatgpt_response)

        # Return the augmented list containing the GPT-2 generated story and ChatGPT responses
        return gpt_2

    # Handle invalid request method
    elif request_method != 'POST':
        return f'Invalid method request: {request_method}'

    # Handle invalid content type
    elif content_type != 'application/json':
        return f'Invalid content type: {content_type}'


if __name__ == "__main__":
    from waitress import serve
    serve(app, host="0.0.0.0", port=8000)
